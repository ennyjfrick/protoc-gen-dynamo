// Code generated by protoc-gen-dynamo v0.1.0. DO NOT EDIT.
// source: v1/example.proto

package v1

import (
	"fmt"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"google.golang.org/protobuf/proto"
	"strconv"
	"strings"
	"time"
)

func (p *Store) MarshalDynamo() (*dynamodb.AttributeValue, error) {
	av := &dynamodb.AttributeValue{}
	err := p.MarshalDynamoDBAttributeValue(av)
	if err != nil {
		return nil, err
	}
	return av, nil
}

func (p *Store) MarshalDynamoItem() (map[string]*dynamodb.AttributeValue, error) {
	av := &dynamodb.AttributeValue{}
	err := p.MarshalDynamoDBAttributeValue(av)
	if err != nil {
		return nil, err
	}
	return av.M, nil
}

func (p *Store) MarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {
	var sb strings.Builder
	var err error
	nullBoolTrue := true
	v1 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.Id)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.Country)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.Foo), 10))
	v1.S = aws.String(sb.String())
	v2 := &dynamodb.AttributeValue{S: aws.String("example")}
	v3 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.Id)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.Country)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.Foo), 10))
	v3.S = aws.String(sb.String())
	v4 := &dynamodb.AttributeValue{S: aws.String("dummyvalue")}
	v5, err := p.Version()
	if err != nil {
		return err
	}
	v6 := &dynamodb.AttributeValue{}
	v6buf, err := proto.Marshal(p)
	if err != nil {
		return err
	}
	v6.B = v6buf
	v7 := &dynamodb.AttributeValue{}
	v7.S = aws.String("examplepb.v1.Store")
	v8 := &dynamodb.AttributeValue{}
	if len(p.Id) != 0 {
		v8.S = aws.String(p.Id)
	} else {
		v8.NULL = &nullBoolTrue
	}
	av.M = map[string]*dynamodb.AttributeValue{
		"expires_at":    &dynamodb.AttributeValue{N: aws.String(strconv.FormatInt(int64(p.ExpiresAt.AsTime().Round(time.Second).Unix()), 10))},
		"expires_at_ms": &dynamodb.AttributeValue{N: aws.String(strconv.FormatInt(int64(p.ExpiresAtMs.AsTime().Round(time.Millisecond).UnixNano()/int64(time.Millisecond)), 10))},
		"expires_at_ns": &dynamodb.AttributeValue{N: aws.String(strconv.FormatInt(int64(p.ExpiresAtNs.AsTime().UnixNano()), 10))},
		"gsi1pk":        v3,
		"gsi1sk":        v4,
		"pk":            v1,
		"sk":            v2,
		"store_id":      v8,
		"typ":           v7,
		"value":         v6,
		"version":       &dynamodb.AttributeValue{N: aws.String(strconv.FormatInt(v5, 10))},
	}
	return nil
}

func (p *User) MarshalDynamo() (*dynamodb.AttributeValue, error) {
	av := &dynamodb.AttributeValue{}
	err := p.MarshalDynamoDBAttributeValue(av)
	if err != nil {
		return nil, err
	}
	return av, nil
}

func (p *User) MarshalDynamoItem() (map[string]*dynamodb.AttributeValue, error) {
	av := &dynamodb.AttributeValue{}
	err := p.MarshalDynamoDBAttributeValue(av)
	if err != nil {
		return nil, err
	}
	return av.M, nil
}

func (p *User) MarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {
	var sb strings.Builder
	var err error
	v1 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.TenantId)
	v1.S = aws.String(sb.String())
	v2 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString(p.Id)
	v2.S = aws.String(sb.String())
	v3 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.TenantId)
	v3.S = aws.String(sb.String())
	v4 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString(p.IdpId)
	v4.S = aws.String(sb.String())
	v5 := &dynamodb.AttributeValue{}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.IdpId)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.AnEnum), 10))
	v5.S = aws.String(sb.String())
	v6 := &dynamodb.AttributeValue{}
	sb.Reset()
	v6.S = aws.String(sb.String())
	v7, err := p.Version()
	if err != nil {
		return err
	}
	v8 := &dynamodb.AttributeValue{}
	v8buf, err := proto.Marshal(p)
	if err != nil {
		return err
	}
	v8.B = v8buf
	v9 := &dynamodb.AttributeValue{}
	v9.S = aws.String("examplepb.v1.User")
	v10 := &dynamodb.AttributeValue{}
	v10.BOOL = aws.Bool(p.DeletedAt.IsValid())
	av.M = map[string]*dynamodb.AttributeValue{
		"deleted": v10,
		"gsi1pk":  v3,
		"gsi1sk":  v4,
		"gsi2pk":  v5,
		"gsi2sk":  v6,
		"pk":      v1,
		"sk":      v2,
		"typ":     v9,
		"value":   v8,
		"version": &dynamodb.AttributeValue{N: aws.String(strconv.FormatInt(v7, 10))},
	}
	return nil
}

func (p *Store) UnmarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {
	typ, ok := av.M["typ"]
	if !ok {
		return fmt.Errorf("dyanmo: typ missing")
	}
	if aws.StringValue(typ.S) != "examplepb.v1.Store" {
		return fmt.Errorf("dyanmo: _type mismatch: examplepb.v1.Store expected, got: '%s'", typ)
	}
	value, ok := av.M["value"]
	if !ok {
		return fmt.Errorf("dyanmo: value missing")
	}
	return proto.Unmarshal(value.B, p)
}

func (p *Store) UnmarshalDynamo(av *dynamodb.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *Store) UnmarshalDynamoItem(av map[string]*dynamodb.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&dynamodb.AttributeValue{M: av})
}

func (p *User) UnmarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {
	typ, ok := av.M["typ"]
	if !ok {
		return fmt.Errorf("dyanmo: typ missing")
	}
	if aws.StringValue(typ.S) != "examplepb.v1.User" {
		return fmt.Errorf("dyanmo: _type mismatch: examplepb.v1.User expected, got: '%s'", typ)
	}
	value, ok := av.M["value"]
	if !ok {
		return fmt.Errorf("dyanmo: value missing")
	}
	return proto.Unmarshal(value.B, p)
}

func (p *User) UnmarshalDynamo(av *dynamodb.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *User) UnmarshalDynamoItem(av map[string]*dynamodb.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&dynamodb.AttributeValue{M: av})
}

func (p *Store) Version() (int64, error) {
	err := p.UpdatedAt.CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.UpdatedAt.AsTime()
	return t.UnixNano(), nil
}

func (p *Store) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.Id)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.Country)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.Foo), 10))
	return sb.String()
}

func StorePartitionKey(id string, country string, foo uint64) string {
	return (&Store{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).PartitionKey()
}

func (p *Store) SortKey() string {
	return "example"
}

func StoreSortKey() string {
	return (&Store{}).SortKey()
}

func (p *Store) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.Id)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.Country)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.Foo), 10))
	return sb.String()
}

func StoreGsi1PkKey(id string, country string, foo uint64) string {
	return (&Store{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).Gsi1PkKey()
}

func (p *Store) Gsi1SkKey() string {
	return "dummyvalue"
}

func StoreGsi1SkKey() string {
	return (&Store{}).Gsi1SkKey()
}

func (p *User) Version() (int64, error) {
	err := p.UpdatedAt.CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.UpdatedAt.AsTime()
	return t.UnixNano(), nil
}

func (p *User) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.TenantId)
	return sb.String()
}

func UserPartitionKey(tenantId string) string {
	return (&User{TenantId: tenantId}).PartitionKey()
}

func (p *User) SortKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.Id)
	return sb.String()
}

func UserSortKey(id string) string {
	return (&User{Id: id}).SortKey()
}

func (p *User) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.TenantId)
	return sb.String()
}

func UserGsi1PkKey(tenantId string) string {
	return (&User{TenantId: tenantId}).Gsi1PkKey()
}

func (p *User) Gsi1SkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.IdpId)
	return sb.String()
}

func UserGsi1SkKey(idpId string) string {
	return (&User{IdpId: idpId}).Gsi1SkKey()
}

func (p *User) Gsi2PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.IdpId)
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.AnEnum), 10))
	return sb.String()
}

func UserGsi2PkKey(idpId string, anEnum BasicEnum) string {
	return (&User{
		AnEnum: anEnum,
		IdpId:  idpId,
	}).Gsi2PkKey()
}
